public class Soduku_Solver {
    public static void main(String[] args) {
        int[][]board=new int[][]{
                {3, 0, 6, 5, 0, 8, 4, 0, 0},
                {5, 2, 0, 0, 0, 0, 0, 0, 0},
                {0, 8, 7, 0, 0, 0, 0, 3, 1},
                {0, 0, 3, 0, 1, 0, 0, 8, 0},
                {9, 0, 0, 8, 6, 3, 0, 0, 5},
                {0, 5, 0, 0, 9, 0, 6, 0, 0},
                {1, 3, 0, 0, 0, 0, 2, 5, 0},
                {0, 0, 0, 0, 0, 0, 0, 7, 4},
                {0, 0, 5, 2, 0, 6, 3, 0, 0}

        };
    }
    static boolean solve(int[][] board) {
        // Look for the next unfilled cell.
        int n = board.length;
        int row = -1;
        int col = -1;

        boolean foundUnfilledCell = false;

        // this is how we are replacing the r,c from arguments
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 0) {// Found unfilled cell.
                    row = i;
                    col = j;
                    foundUnfilledCell = true;
                    break;
                }
            }
            // if you found some empty element in row, then break
            if (foundUnfilledCell) {
                break;
            }
        }

        if (!foundUnfilledCell) {
            // No unfilled cells left. That means a solution is found.
            return true;
        }

        // backtrack
        // Look for a number (1..9) that "is safe", i.e. can feasibly be placed in this unfilled cell.
        for (int number = 1; number <= 9; number++) {
            if (isSafe(board, row, col, number)) {// Found a safe number, put it to the board.
                board[row][col] = number;
                // Recurse to find and fill next unfilled cell.
                if (solve(board)) {
                    // found the answer
                    return true;
                } else {// Placing number num to this unfilled cell does not lead to a solution.
                    // So we undo placing it to the board:
                    // backtrack
                    board[row][col] = 0;
                    // ... and continue with the \`for\` loop.
                    // That will lead to trying other numbers: backtracking.
                }
            }
        }// Starting from the state of the board passed to this call, no solution is possible.
        // This cannot be the initial call (root call in the recursion hierarchy of calls) because
        // problem statement guarantees that a solution exists for every test board.
        // So returning false will lead to backtracking.
        return false;
    }
    static boolean isSafe(int[][]board,int row,int col,int num){
        //check the row
        for (int i=0;i< board.length;i++){
            //check if the number is in the row
            if (board[row][i]==num){
                return false;
            }

        }
        //check the col
        for (int[]nums:board){
            //check if the number is in the col
            if (nums[col]==num){
                return false;
            }
        }
        int sqrt=(int)(Math.sqrt(board.length));
        int rowStart=row-row%sqrt;
        int colStart=col-col%sqrt;
        for (int r=rowStart;r<rowStart+sqrt;r++){
            for (int c=colStart;c<colStart+sqrt;c++){
                if (board[r][c]==num){
                    return false;
                }
            }
        }
        return true;
    }

}
